{
    "/teste": "testado again 7.0",
"/formatarorganograma": "def formatarOrganograma(String numero, String formato) {\n    def resultado = \"\"\n    def indiceNumero = 0\n\n    // Itera sobre cada caractere do formato fornecido\n    formato.each { simbolo ->\n        if (simbolo == '#') {\n            if (indiceNumero < numero.length()) {\n                resultado += numero[indiceNumero]\n                indiceNumero++\n            }\n        } else {\n            // Adiciona os caracteres do formato como pontos, traços, etc.\n            resultado += simbolo\n        }\n    }\n    \n    return resultado\n}",
 "/formatarCpfCnpj": "formatarCpfCnpj = { campo ->\n  campoFormatado = \"\";\n  switch(campo.tamanho()){\n      case 11:\n        mascara = ~/\\(\\d{3}\\)(\\d{3})(\\d{3})(\\d{2})/\n        campo.replaceAll(mascara){ documento, a, b, c, d ->\n              campoFormatado = \"${a}.${b}.${c}-${d}\"\n        }\n        break\n      case 14:\n        mascara = ~/\\(\\d{2}\\)(\\d{3})(\\d{3})(\\d{4})(\\d{2})/\n        campo.replaceAll(mascara){ cnpj, a, b, c, d, e ->\n          campoFormatado = \"${a}.${b}.${c}/${d}-${e}\"\n        }\n        break\n      default:\n        campoFormatado = campo\n        break    \n  }  \n  retornar campoFormatado\n}",
"/parseInterval": "def parseInterval(inputStr) {\n    // Encontrar todos os números na string\n    def numbers = inputStr.findAll(/\\d+/).collect { it.toInteger() }\n\n    // Verificar o número de elementos encontrados\n    if (numbers.size() >= 2) {\n        // Retornar o primeiro e o segundo número se houver pelo menos dois\n        return [numbers[0], numbers[1]]\n    } else if (numbers.size() == 1) {\n        // Retornar o único número encontrado se houver apenas um\n        return numbers[0]\n    } else {\n        // Retornar null se não houver nenhum número\n        return null\n    }\n}\n\ndef result = parseInterval(userInput)\n\nif (result) {\n    def (start, end) = result\n    println \"Número inicial: $start, Número final: $end\"\n} else {\n    println \"Entrada inválida!\"\n}",
"/formatarTelefone": "def formatarNumero(String telefone) {\n    // Remove todos os caracteres que não sejam números\n    telefone = telefone.replaceAll(/\\D/, '')\n\n    // Verifica se o DDD tem 3 dígitos e corrige para 2 se necessário\n    if (telefone.startsWith('0') && telefone.length() > 2) {\n        telefone = telefone[1..-1] // Remove o primeiro dígito (0)\n    }\n\n    // Se o número tiver menos de 11 dígitos, adiciona um '9' na frente do número\n    if (telefone.length() == 10) {\n        telefone = telefone[0..1] + '9' + telefone[2..-1]\n    }\n\n    // Formata o número final no padrão (XX) XXXXX-XXXX\n    return \"(${telefone[0..1]}) ${telefone[2..6]}-${telefone[7..-1]}\"\n}",
"/extenso": "def extenso(valor) {\n  urlGet = \"https://script.google.com/macros/s/AKfycbwPOZuEDJyDnWo5gnqDab4SOgsASnI9G7e3LZPjCcMM8OsgORU/exec?extenso=$valor\"\n  extenso = Http.servico(urlGet).GET().json()\n  return extenso.valorExtenso\n}",
"/formatarNumero": "def formatarNumero(numero) {\n    if (numero == null || numero == 0 || numero == \"\") {\n        return \"0,00\"\n    }\n\n    def partes = numero.toString().split(\"\\\\.\")\n    def parteInteira = partes[0].reverse().replaceAll(/(\\d{3})(?=\\d)/, '$1.').reverse() // Corrigido para não adicionar ponto no início\n    def parteDecimal = partes.size() > 1 ? partes[1].padRight(2, '0') : \"00\" // Garante que sempre tenha 2 dígitos decimais\n\n    return \"${parteInteira},${parteDecimal}\"\n}",

    "/formatarcep": "def formatarCEP(String cep) {\n    cep = cep.replaceAll(/\\D/, '')\n    if (cep.size() == 8) {\n        return cep[0..1] + '.' + cep[2..4] + '-' + cep[5..7]\n    } else {\n        return cep\n    }\n}",
    "/Esquema.lista": "campo: Esquema.lista ( Esquema.objeto ([\ncampo1: Esquema.caracter\n])),",
    "/fonte":"esquema = [\ncampo1: Esquema.caracter,\ncampo2: Esquema.numero];\nfonte = Dados.dinamico.v2.novo(esquema);\nreturn fonte;",
    "/imprimir": "imprimir 'Olá, mundo!';",
    "/percorrer": "percorrer(lista) { imprimir item; }",
    "/retornar": "retornar resultado;",
    "/se": "se (condicao) { imprimir 'Verdadeiro'; } senao { imprimir 'Falso'; }",
    "/tentar": "tentar { // código } tratar (excecao) { // tratamento } finalizar { // finalização }",
    "/Arquivo.novo": "arquivo = Arquivo.novo('nome.txt', 'txt');",
    "/Arquivo.abrir": "arquivo = Arquivo.abrir('nome.txt');",
    "/Arquivo.escrever": "arquivo.escrever('Conteúdo do arquivo');",
    "/Arquivo.ler": "conteudo = arquivo.ler();",
    "/Arquivo.fechar": "arquivo.fechar();",
    "/Email.enviar": "Email.enviar(destinatario: 'email@exemplo.com', assunto: 'Assunto', mensagem: 'Corpo do e-mail');",
    "/Notificacao.enviar": "Notificacao.enviar(usuario: 'usuario', mensagem: 'Mensagem de notificação');",
    "/Http.servico": "servico = Http.servico('https://api.exemplo.com');",
    "/Http.servico().GET": "resposta = servico.GET('/recurso');",
    "/Http.servico().POST": "resposta = servico.POST('/recurso', dados);",
    "/Criterio.onde": "criterio = Criterio.onde('campo').igual('valor');",
    "/Dados.busca": "resultado = Dados.caminho.busca(criterio);",
    "/Cache.definir": "Cache.definir('chave', valor);",
    "/Cache.obter": "valor = Cache.obter('chave');",
    "/Datas.hoje": "dataAtual = Datas.hoje();",
    "/Datas.somarDias": "novaData = dataAtual.somarDias(5);",
    "/Caracteres.maiusculo": "textoMaiusculo = Caracteres.maiusculo('texto');",
    "/Numeros.arredonda": "valorArredondado = Numeros.arredonda(3.14159, 2);"
  }
